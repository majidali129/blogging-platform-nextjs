generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String?
  userName     String     @unique
  email        String     @unique
  password     String
  profilePhoto String?
  refreshToken String?
  posts        Post[]     @relation("UserPosts")
  comments     Comment[]  @relation("UserComments")
  reactions    Reaction[]
  bookmarks    Post[]     @relation("Bookmarks", fields: [bookmarkIDs], references: [id])
  bookmarkIDs  String[]   @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Post         Post[]
}

model Post {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  coverPhoto  String?
  author      User       @relation("UserPosts", fields: [authorId], references: [id])
  authorId    String     @db.ObjectId
  tags        Tag[]      @relation(fields: [tagIDs], references: [id])
  tagIDs      String[]   @default([]) @db.ObjectId
  comments    Comment[]
  readTime    Int?
  reactions   Reaction[]
  User        User?      @relation(fields: [userId], references: [id])
  userId      String?    @db.ObjectId
  bookmarks   User[]     @relation("Bookmarks", fields: [bookmarkIDs], references: [id])
  bookmarkIDs String[]   @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Tag {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  color       Color
  posts       Post[]   @relation(fields: [postIDs], references: [id])
  postIDs     String[] @default([]) @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

type Color {
  bg   String
  text String
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reaction {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  emoji  String
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  post   Post   @relation(fields: [postId], references: [id])
  postId String @db.ObjectId
}
